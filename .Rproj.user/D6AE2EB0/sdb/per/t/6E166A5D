{
    "contents" : "---\ntitle: \"Demo of the Slidify Capability\"\nauthor: \"Kevin A. Ryan\"\noutput:\n  html_document:\n    highlight: monochrome\n    theme: journal\nhitheme: tomorrow\njob: The Johns Hopkins University - Applied Physics Lab\nhighlighter: hprettify\n\nframework: io2012\nwidgets:\n- mathjax\n- quiz\n---\n\n####A short Example based on World Bank Data \n\n### why reproducible research?\n\nmake a slidify version to demonstrate the capability!!!\n\n***why reproducible research***\n\nWhat reproducible reporting is about is a validation of the data analysis. Because you're not collecting independent data using independent methods, it's a little bit more difficult to validate the scientific question itself. But if you can take someone's data and reproduce their findings, then you can, in some sense, validate the data analysis. *This involves having the data and the code because more likely than not, the analysis will have been done on the computer using some sort of programming language, like R.* So you can take their code and their data and reproduce the findings that they come up with. Then you can at least have confidence that the analysis was done appropriately and that the correct methods were used.\n\n###Motion Chart Prototype\n\nStep 1: Get and wrangle data from World Bank\n```{r, cache=TRUE}\n  library (RJSONIO)\ngetWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010', value=\"value\", per.page=12000){ \n     \n        url <- paste(\"http://api.worldbank.org/countries/all/indicators/\", id,\n                     \"?date=\", date, \"&format=json&per_page=\", per.page,\n                     sep=\"\")\n        \n        wbData <- fromJSON(url)[[2]]\n        \n        wbData = data.frame(\n                year = as.numeric(sapply(wbData, \"[[\", \"date\")), \n                value = as.numeric(sapply(wbData, function(x)\n                        ifelse(is.null(x[[\"value\"]]),NA, x[[\"value\"]]))),  \n                country.name = sapply(wbData, function(x) x[[\"country\"]]['value']),\n                country.id = sapply(wbData, function(x) x[[\"country\"]]['id'])    \n        )\n        \n        names(wbData)[2] <- value\n        \n        return(wbData)\n}\n\ngetWorldBankCountries <- function(){\n        require(RJSONIO)\n        wbCountries <-\n                fromJSON(\"http://api.worldbank.org/countries?per_page=12000&format=json\") \n        wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))\n        wbCountries$longitude <- as.numeric(wbCountries$longitude)\n        wbCountries$latitude <- as.numeric(wbCountries$latitude)\n        levels(wbCountries$region.value) <- gsub(\" \\\\(all income levels\\\\)\",\n                                                 \"\", levels(wbCountries$region.value))\n        return(wbCountries)\n}\n```\n\n##Next slide\n```{r, cache=TRUE}\nlibrary(RJSONIO)\n## Create a string 1960:this year, e.g. 1960:2011\nyears <- paste(\"1960:\", format(Sys.Date(), \"%Y\"), sep=\"\")\n\n## Fertility rate\nfertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN', date=years, value=\"fertility.rate\")\n\n## Life Expectancy\nlife.exp <- getWorldBankData(id='SP.DYN.LE00.IN', date=years,value=\"life.expectancy\") \n\n## Population\npopulation <- getWorldBankData(id='SP.POP.TOTL', date=years, value=\"population\")\n\n## GDP per capita (current US$)\nGDP.per.capita <- getWorldBankData(id='NY.GDP.PCAP.CD',date=years,value=\"GDP.per.capita.Current.USD\") \n\n## Merge data sets\nwbData <- merge(life.exp, fertility.rate)\nwbData <- merge(wbData, population)\nwbData <- merge(wbData, GDP.per.capita)\n\n## Get country mappings\nwbCountries <- getWorldBankCountries()\n\n## Add regional information\nwbData <- merge(wbData, wbCountries[c(\"iso2Code\", \"region.value\", \"incomeLevel.value\")],by.x=\"country.id\", by.y=\"iso2Code\")\n\n```\n\n###Step 2: Build the Motion Chart\n```{r, warning=FALSE, error=FALSE }\n\nsubData <- subset(wbData, !region.value %in% \"Aggregates\" , select=\n                  -country.id) \n## Create a motion chart\nsuppressPackageStartupMessages(library(googleVis))\nlibrary(googleVis)\n\nM <- gvisMotionChart(subData, idvar=\"country.name\", timevar=\"year\",\n                     options=list(width=700, height=600))\n\n## Display the chart in your browser\nplot(M)\n```\n\n",
    "created" : 1440685690776.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4162821716",
    "id" : "6E166A5D",
    "lastKnownWriteTime" : 1440692999,
    "path" : "~/_data/WorldBankDemo/motion.Rmd",
    "project_path" : "motion.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}