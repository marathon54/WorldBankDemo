suppressPackageStartupMessages(library(googleVis))
library(googleVis)
subData<- read.table("~/_data/MotionChart/worldbank.csv", header=TRUE, quote="\"")
wbData <- merge(wbData, wbCountries[c("iso2Code", "region.value",
"incomeLevel.value")],
by.x="country.id", by.y="iso2Code")
library (RJSONIO)
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN',
date=years, value="fertility.rate")
library (RJSONIO)
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010', value="value", per.page=12000){
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
wbData <- fromJSON(url)[[2]]
wbData = data.frame(
year = as.numeric(sapply(wbData, "[[", "date")),
value = as.numeric(sapply(wbData, function(x)
ifelse(is.null(x[["value"]]),NA, x[["value"]]))),
country.name = sapply(wbData, function(x) x[["country"]]['value']),
country.id = sapply(wbData, function(x) x[["country"]]['id'])
)
names(wbData)[2] <- value
return(wbData)
}
getWorldBankCountries <- function(){
require(RJSONIO)
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
library (RJSONIO)
## Create a string 1960:this year, e.g. 1960:2011
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
## Fertility rate
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN',
date=years, value="fertility.rate")
## Life Expectancy
life.exp <- getWorldBankData(id='SP.DYN.LE00.IN',  date=years,
value="life.expectancy")
## Population
population <- getWorldBankData(id='SP.POP.TOTL',  date=years,
value="population")
## GDP per capita (current US$)
GDP.per.capita <- getWorldBankData(id='NY.GDP.PCAP.CD',
date=years,
value="GDP.per.capita.Current.USD")
## Merge data sets
wbData <- merge(life.exp, fertility.rate)
wbData <- merge(wbData, population)
wbData <- merge(wbData, GDP.per.capita)
## Get country mappings
wbCountries <- getWorldBankCountries()
## Add regional information
wbData <- merge(wbData, wbCountries[c("iso2Code", "region.value",
"incomeLevel.value")],
by.x="country.id", by.y="iso2Code")
subData <- subset(wbData, !region.value %in% "Aggregates" , select=
-country.id)
## Create a motion chart
suppressPackageStartupMessages(library(googleVis))
library(googleVis)
M <- gvisMotionChart(subData, idvar="country.name", timevar="year",
options=list(width=700, height=600))
## Display the chart in your browser
plot(M)
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN',
date=years, value="fertility.rate")
wbCountries <- getWorldBankCountries()
library (RJSONIO)
help(getWorldBankData)
install("RJSONIO")
library("RJSONIO", lib.loc="~/R/win-library/3.2")
install.packages(c("crayon", "git2r", "googleVis", "gridExtra", "httr", "KernSmooth", "manipulate", "nonlinearTseries", "plyr", "R6", "Rcpp", "RCurl", "Rfacebook", "rmarkdown", "rversions", "scales", "UsingR", "XML"))
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN',
date=years, value="fertility.rate")
require(RJSONIO)
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN',
date=years, value="fertility.rate")
ife.exp <- getWorldBankData(id='SP.DYN.LE00.IN',  date=years,
value="life.expectancy")
life.exp <- getWorldBankData(id='SP.DYN.LE00.IN',  date=years,
value="life.expectancy")
population <- getWorldBankData(id='SP.POP.TOTL',  date=years,
value="population")
GDP.per.capita <- getWorldBankData(id='NY.GDP.PCAP.CD',
date=years,
value="GDP.per.capita.Current.USD")
wbData <- merge(life.exp, fertility.rate)
wbData <- merge(wbData, population)
wbData <- merge(wbData, GDP.per.capita)
wbCountries <- getWorldBankCountries()
wbData <- merge(wbData, wbCountries[c("iso2Code", "region.value", "incomeLevel.value")],by.x="country.id", by.y="iso2Code")
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010', value="value", per.page=12000){
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
wbData <- fromJSON(url)[[2]]
wbData = data.frame(
year = as.numeric(sapply(wbData, "[[", "date")),
value = as.numeric(sapply(wbData, function(x)
ifelse(is.null(x[["value"]]),NA, x[["value"]]))),
country.name = sapply(wbData, function(x) x[["country"]]['value']),
country.id = sapply(wbData, function(x) x[["country"]]['id'])
)
names(wbData)[2] <- value
return(wbData)
}
getWorldBankCountries <- function(){
require(RJSONIO)
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
Step 1: Get and wrangle data from World Bank
```{r}
library (RJSONIO)
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010', value="value", per.page=12000){
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
wbData <- fromJSON(url)[[2]]
wbData = data.frame(
year = as.numeric(sapply(wbData, "[[", "date")),
value = as.numeric(sapply(wbData, function(x)
ifelse(is.null(x[["value"]]),NA, x[["value"]]))),
country.name = sapply(wbData, function(x) x[["country"]]['value']),
country.id = sapply(wbData, function(x) x[["country"]]['id'])
)
names(wbData)[2] <- value
return(wbData)
}
getWorldBankCountries <- function(){
require(RJSONIO)
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
```
##Next slide
```{r}
library(RJSONIO)
## Create a string 1960:this year, e.g. 1960:2011
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
## Fertility rate
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN', date=years, value="fertility.rate")
## Life Expectancy
life.exp <- getWorldBankData(id='SP.DYN.LE00.IN', date=years,value="life.expectancy")
## Population
population <- getWorldBankData(id='SP.POP.TOTL', date=years, value="population")
## GDP per capita (current US$)
GDP.per.capita <- getWorldBankData(id='NY.GDP.PCAP.CD',date=years,value="GDP.per.capita.Current.USD")
## Merge data sets
wbData <- merge(life.exp, fertility.rate)
wbData <- merge(wbData, population)
wbData <- merge(wbData, GDP.per.capita)
## Get country mappings
wbCountries <- getWorldBankCountries()
## Add regional information
wbData <- merge(wbData, wbCountries[c("iso2Code", "region.value", "incomeLevel.value")],by.x="country.id", by.y="iso2Code")
```
###Step 2: Build the Motion Chart
```{r, warning=FALSE, error=FALSE }
subData <- subset(wbData, !region.value %in% "Aggregates" , select=
-country.id)
## Create a motion chart
suppressPackageStartupMessages(library(googleVis))
library(googleVis)
M <- gvisMotionChart(subData, idvar="country.name", timevar="year",
options=list(width=700, height=600))
## Display the chart in your browser
plot(M)
Step 1: Get and wrangle data from World Bank
```{r}
library (RJSONIO)
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010', value="value", per.page=12000){
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
wbData <- fromJSON(url)[[2]]
wbData = data.frame(
year = as.numeric(sapply(wbData, "[[", "date")),
value = as.numeric(sapply(wbData, function(x)
ifelse(is.null(x[["value"]]),NA, x[["value"]]))),
country.name = sapply(wbData, function(x) x[["country"]]['value']),
country.id = sapply(wbData, function(x) x[["country"]]['id'])
)
names(wbData)[2] <- value
return(wbData)
}
getWorldBankCountries <- function(){
require(RJSONIO)
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
```
##Next slide
```{r}
library(RJSONIO)
## Create a string 1960:this year, e.g. 1960:2011
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
## Fertility rate
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN', date=years, value="fertility.rate")
## Life Expectancy
life.exp <- getWorldBankData(id='SP.DYN.LE00.IN', date=years,value="life.expectancy")
## Population
population <- getWorldBankData(id='SP.POP.TOTL', date=years, value="population")
## GDP per capita (current US$)
GDP.per.capita <- getWorldBankData(id='NY.GDP.PCAP.CD',date=years,value="GDP.per.capita.Current.USD")
## Merge data sets
wbData <- merge(life.exp, fertility.rate)
wbData <- merge(wbData, population)
wbData <- merge(wbData, GDP.per.capita)
## Get country mappings
wbCountries <- getWorldBankCountries()
## Add regional information
wbData <- merge(wbData, wbCountries[c("iso2Code", "region.value", "incomeLevel.value")],by.x="country.id", by.y="iso2Code")
```
###Step 2: Build the Motion Chart
```{r, warning=FALSE, error=FALSE }
subData <- subset(wbData, !region.value %in% "Aggregates" , select=
-country.id)
## Create a motion chart
suppressPackageStartupMessages(library(googleVis))
library(googleVis)
M <- gvisMotionChart(subData, idvar="country.name", timevar="year",
options=list(width=700, height=600))
## Display the chart in your browser
plot(M)
Step 1: Get and wrangle data from World Bank
```{r}
library (RJSONIO)
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010', value="value", per.page=12000){
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
wbData <- fromJSON(url)[[2]]
wbData = data.frame(
year = as.numeric(sapply(wbData, "[[", "date")),
value = as.numeric(sapply(wbData, function(x)
ifelse(is.null(x[["value"]]),NA, x[["value"]]))),
country.name = sapply(wbData, function(x) x[["country"]]['value']),
country.id = sapply(wbData, function(x) x[["country"]]['id'])
)
names(wbData)[2] <- value
return(wbData)
}
getWorldBankCountries <- function(){
require(RJSONIO)
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
```
##Next slide
```{r}
library(RJSONIO)
## Create a string 1960:this year, e.g. 1960:2011
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
## Fertility rate
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN', date=years, value="fertility.rate")
## Life Expectancy
life.exp <- getWorldBankData(id='SP.DYN.LE00.IN', date=years,value="life.expectancy")
## Population
population <- getWorldBankData(id='SP.POP.TOTL', date=years, value="population")
## GDP per capita (current US$)
GDP.per.capita <- getWorldBankData(id='NY.GDP.PCAP.CD',date=years,value="GDP.per.capita.Current.USD")
## Merge data sets
wbData <- merge(life.exp, fertility.rate)
wbData <- merge(wbData, population)
wbData <- merge(wbData, GDP.per.capita)
## Get country mappings
wbCountries <- getWorldBankCountries()
## Add regional information
wbData <- merge(wbData, wbCountries[c("iso2Code", "region.value", "incomeLevel.value")],by.x="country.id", by.y="iso2Code")
```
###Step 2: Build the Motion Chart
```{r, warning=FALSE, error=FALSE }
subData <- subset(wbData, !region.value %in% "Aggregates" , select=
-country.id)
## Create a motion chart
suppressPackageStartupMessages(library(googleVis))
library(googleVis)
M <- gvisMotionChart(subData, idvar="country.name", timevar="year",
options=list(width=700, height=600))
## Display the chart in your browser
plot(M)
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010', value="value", per.page=12000){
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
}
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010', value="value", per.page=12000){
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
wbData <- fromJSON(url)[[2]]
wbData = data.frame(
year = as.numeric(sapply(wbData, "[[", "date")),
value = as.numeric(sapply(wbData, function(x)
ifelse(is.null(x[["value"]]),NA, x[["value"]]))),
country.name = sapply(wbData, function(x) x[["country"]]['value']),
country.id = sapply(wbData, function(x) x[["country"]]['id'])
)
names(wbData)[2] <- value
return(wbData)
}
getWorldBankCountries <- function(){
require(RJSONIO)
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
